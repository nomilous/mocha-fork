#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var agent;
var repoPath;
var securityToken;
var group;
var host;
var port;
var keyFile;
var certFile;
var key;
var cert;
var doDebug;

function collect(val, memo) {
  memo.push(val);
  return memo;
}

program
  .version(require('../package.json').version)
  .description('xxx')
  .option('-p, --path <path>', 'REQUIRED assign path to repo root')
  .option('-t, --token <string>', 'REQUIRED assign token or set TOKEN in env')
  .option('-g, --group <string>', 'assign agent group(s)', collect, [])
  .option('-H, --host <addr>', 'assign hostname to listen, default 0.0.0.0')
  .option('-P, --port <num>', 'assign port to listen, default 59595')
  .option('-k, --ssl-key-file <path>', 'use specified SSL key')
  .option('-c, --ssl-cert-file <path>', 'use specified certificate')
  .option('-d, --debug', 'display debug output');

program.on('--help', function () {
  console.log('\n\n  Examples:');
  console.log();
  console.log('    $ mocha-spawn-agent -p . -t sEcRet -g group1 -g group2');
  console.log('    $ TOKEN=sEcRet mocha-spawn-agent -p .');
  console.log();
});


program.parse(process.argv);

var repoPath = program.path;
var securityToken = program.token || process.env.TOKEN;
var group = program.group;
var host = program.host;
var port = program.port;
var keyFile = program.sslKeyFile;
var certFile = program.sslCertFile;
var doDebug = program.debug;

if (!repoPath) {
  program.outputHelp();
  console.log();
  process.exit(1);
}

if (!securityToken) {
  program.outputHelp();
  console.log();
  process.exit(1);
}

if (keyFile && certFile) {
  try {
    key = fs.readFileSync(keyFile).toString();
    cert = fs.readFileSync(certFile).toString();
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
}

if (group.length == 0) group = ['any'];

if (doDebug) {
  if (process.env.DEBUG) {
    process.env.DEBUG += ',mocha-spawn:*';
  } else {
    process.env.DEBUG = 'mocha-spawn:*';
  }
}

var debug = require('debug')('mocha-spawn:agent');
var mochaSpawn = require('../');
var AgentServer = mochaSpawn.AgentServer;

debug('starting agent');

agent = new AgentServer({
  path: repoPath,
  securityToken: securityToken,
  groups: group,
  host: host,
  port: port,
  key: key,
  cert: cert
});

agent.on('error', function (err) {
  debug('agent error', err);
});

agent.start()

  .then(function () {

    function terminate(opts) {
      console.log();
      debug('terminating agent');
      agent.stop().catch(console.error);
      process.exit(0);
    };

    process.on('SIGINT', terminate);
    process.on('SIGTERM', terminate);

  })

  .catch(console.error);
